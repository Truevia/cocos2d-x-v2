import org.gradle.internal.os.OperatingSystem;

apply plugin: 'com.android.application'
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.firebase.crashlytics'

android {
    // https://developer.android.com/distribute/best-practices/develop/target-sdk
    // compileSdkVersion 30
    // buildToolsVersion "28.0.3"
    
    namespace 'org.cocos.game'
    compileSdkVersion 35
//     FOR NDK on macos m1
//    modify: /path/to/ndk/21.4.7075529/ndk-build
//    $DIR/build/ndk-build "$@"
//    ->
//    arch -x86_64 $DIR/build/ndk-build "$@"
    // https://github.com/android/ndk/wiki/Unsupported-Downloads#r16b
    ndkVersion "16.1.4479499"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Ensure compatibility with 16KB page-size devices by extracting JNI libs at install-time
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    defaultConfig {
        applicationId "org.cocos.lua226"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            if (PROP_BUILD_TYPE == 'ndk-build') {
                ndkBuild {
                    targets 'cocos2dlua'
                    // arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    // arguments '-j' + Runtime.runtime.availableProcessors()
                    //
                    // arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    // arguments 'APP_PLATFORM=android-'+PROP_APP_PLATFORM

                    def module_paths = [
                                        project.file("../../../..").absolutePath,
                                        project.file("../../../../cocos2dx").absolutePath,
                                        project.file("../../../../cocos2dx/platform/third_party/android/prebuilt").absolutePath,
                                        project.file("../../../../external").absolutePath,
                                        project.file("../../../../extensions").absolutePath,
                                        project.file("../../../../CocosDenshion/android").absolutePath

                                        // project.file("../../../../").absolutePath,
                                        // project.file("../../cocos2d/cocos").absolutePath,
                                        // project.file("../../cocos2d/external").absolutePath
                                        ]
                    if (OperatingSystem.current().isWindows()) {
                        // should use '/'
                        module_paths = module_paths.collect {it.replaceAll('\\\\', '/')}
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                }
            }
            // else if (PROP_BUILD_TYPE == 'cmake') {
            //     cmake {
            //         targets 'MyGame'
            //         arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", \
            //                   "-DUSE_CHIPMUNK=TRUE", "-DUSE_BULLET=TRUE"
            //         cppFlags "-frtti -fexceptions"
            //         // prebuilt root must be defined as a directory which you have right to access or create if you use prebuilt
            //         // set "-DGEN_COCOS_PREBUILT=ON" and "-DUSE_COCOS_PREBUILT=OFF" to generate prebuilt,  this way build cocos2d-x libs
            //         // set "-DGEN_COCOS_PREBUILT=OFF" and "-DUSE_COCOS_PREBUILT=ON" to use prebuilt, this way not build cocos2d-x libs
            //         //arguments "-DCOCOS_PREBUILT_ROOT=/Users/laptop/cocos-prebuilt"
            //         //arguments "-DGEN_COCOS_PREBUILT=OFF", "-DUSE_COCOS_PREBUILT=OFF"
            //     }
            // }
        }

        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    externalNativeBuild {
        if (PROP_BUILD_TYPE == 'ndk-build') {
            ndkBuild {
                path "jni/Android.mk"
            }
        }
        // else if (PROP_BUILD_TYPE == 'cmake') {
        //     cmake {
        //         path "../../CMakeLists.txt"
        //     }
        // }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
           // 开启混淆
            minifyEnabled true
            // 开启资源压缩
            shrinkResources true
            // 可选：开启多dex
            multiDexEnabled true

            debuggable false
            jniDebuggable false

            // 添加这些配置来移除调试符号
            crunchPngs false  // 可选：禁用PNG优化以加快构建

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }

            ndk {
                // 设置为 true 以在构建 APK 时剥离调试符号
                // 表现为 aab 里包含 com.android.tools.build.debugsym/** 调试信息, 上传到 Google Play 后, Google Play 的崩溃信息会有用
                debugSymbolLevel 'NONE'

                // debugSymbolLevel 'NONE'  // 'FULL' | 'SYMBOL_TABLE' | 'NONE'
//                Note: If ndk.debugSymbolLevel is set to 'FULL' or 'SYMBOL_TABLE',
//                or if it's omitted and the default behavior includes symbols,
//                the com.android.tools.build.debugsymbols directory will be present
//                in the AAB. Setting it to 'NONE' is the direct method to prevent its
//                inclusion for release builds.
            }
        }

        debug {
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "Lua226 debug"
            
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true

            debuggable true
            jniDebuggable true
            renderscriptDebuggable true

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':libcocos2dx')

    // admob
    //implementation 'com.google.android.gms:play-services-ads:21.3.0'
    // firebase
    // Import the Firebase BoM
    //implementation platform('com.google.firebase:firebase-bom:31.0.2')

    // TODO: Add the dependencies for Firebase products you want to use
    // When using the BoM, don't specify versions in Firebase dependencies
    //implementation 'com.google.firebase:firebase-crashlytics'
    //implementation 'com.google.firebase:firebase-analytics'

}

task cleanAssets(type: Delete) {
    delete 'assets'
}
task copyAssets(type: Copy) {
    from '../../Resources'
    into 'assets'

    println 'copy asset'
}

task clean_assets(type: Delete) {
    delete 'assets/'
}

task dealWith(type:Exec) {
    def compileArgs = []
    def project_root_folder = "${projectDir}/../../"

    def need_crypt = 1
    def copy_to_assets_script = project_root_folder + "/tools/copy_to_assets.py"

    println(project_root_folder)
//    workingDir ${project_root_folder}

    //on windows:
    commandLine 'python3', '-V'


//    if (doEncrypt) {
//        compileArgs << '-e'
//        compileArgs << '-k'
//        compileArgs << project.property('PROP_LUA_ENCRYPT_KEY')
//        compileArgs << '-b'
//        compileArgs << project.property('PROP_LUA_ENCRYPT_SIGN')
//    }

    compileArgs << copy_to_assets_script
    compileArgs << need_crypt
    // commandLine compileArgs
    println 'running command : ' + 'python3 ' + compileArgs.join(' ')
    exec {
//        // if you meet problem, just replace `getCocosCommandPath()` to the path of cocos command
////        executable getCocosCommandPath()
        executable 'python3'
        args compileArgs
    }
}

clean.dependsOn cleanAssets
preBuild.dependsOn dealWith

